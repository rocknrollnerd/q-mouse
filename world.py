import random
import numpy as np


class Cell(object):

    def __init__(self, x, y, occupied):
        self.x = x
        self.y = y
        self.occupied = occupied

    def __repr__(self):
        return '{},{}'.format(self.x, self.y)


class World(object):

    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.cells = []
        self.free_cells = []

    def is_free(self, x, y):
        if ((x < 0) or (x >= self.width)) or ((y < 0) or (y >= self.height)):
            return False
        if self.cells[x, y].occupied:
            return False
        return True


class RandomWorld(World):
    """
    Simple world with walls generated by random. Not actually
    useful for learning, but can be used for tests/debugs.
    Also, at small scale can actually be learned, because has enough
    unique features.
    """
    sparsity = 0.2  # how much walls / black blocks

    def __init__(self, width, height):
        super(RandomWorld, self).__init__(width, height)
        for i in xrange(width):
            row = []
            for j in xrange(height):
                occupied = int(random.random() < self.sparsity)
                row.append(Cell(i, j, occupied))
            self.cells.append(row)
        self.cells = np.array(self.cells)
        self.free_cells = [c for c in self.cells.ravel() if not c.occupied]

    @property
    def mouse_locations(self):
        return [(c.x, c.y) for c in self.free_cells]

    @property
    def cheese_locations(self):
        return [(c.x, c.y) for c in self.free_cells]

    @property
    def cat_locations(self):
        return [(c.x, c.y) for c in self.free_cells]


class DrawnWorld(World):
    """
    A little bit less simple world drawn in .txt file. Look up
    examples from `worlds` folder.
    """

    def __init__(self, filename):
        self.mouse_locations = []
        self.cheese_locations = []
        self.cat_locations = []
        self.cells = []
        with open(filename, 'r') as f:
            i = 0
            for line in f:
                if line.endswith('\n'):
                    line = line[:-1]
                print len(line), line
                row = []
                for j in xrange(len(line)):
                    if line[j] == 'x':
                        # wall
                        cell = Cell(i, j, occupied=True)
                    else:
                        cell = Cell(i, j, occupied=False)
                        if line[j] == 'm':
                            # mouse spawn location
                            self.mouse_locations.append((i, j))
                        elif line[j] == 'c':
                            # cheese spawn location
                            self.cheese_locations.append((i, j))
                        elif line[j] == 'k':
                            # i'm out of letters. cat spawn location
                            self.cat_locations.append((i, j))
                    row.append(cell)
                self.cells.append(row)
                i += 1
        self.cells = np.array(self.cells)
        self.width, self.height = self.cells.shape
        self.free_cells = [c for c in self.cells.ravel() if not c.occupied]
